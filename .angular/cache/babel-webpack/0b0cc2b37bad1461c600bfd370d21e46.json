{"ast":null,"code":"import _classCallCheck from \"/Users/jekabolt/go/src/github.com/jekabolt/grbpwr-admin-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jekabolt/go/src/github.com/jekabolt/grbpwr-admin-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { Token } from \"../models/token\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/authentication.service\";\nexport var AuthGuard = /*#__PURE__*/(function () {\n  var AuthGuard = /*#__PURE__*/function () {\n    function AuthGuard(router, authenticationService) {\n      _classCallCheck(this, AuthGuard);\n\n      this.router = router;\n      this.authenticationService = authenticationService;\n    }\n\n    _createClass(AuthGuard, [{\n      key: \"canActivate\",\n      value: function canActivate(route, state) {\n        var currentSession = this.authenticationService.currentSessionValue;\n        var token = this.getTokenWithExpiry();\n\n        if (token != null) {\n          currentSession = token;\n        }\n\n        if (currentSession.accessToken && currentSession.refreshToken) {\n          return true;\n        } // not logged in so redirect to login page with the return url\n\n\n        this.router.navigate(['/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n        return false;\n      }\n    }, {\n      key: \"getTokenWithExpiry\",\n      value: function getTokenWithExpiry() {\n        var tokenStr = localStorage.getItem(\"currentSession\");\n\n        if (!tokenStr) {\n          return null;\n        }\n\n        var item = JSON.parse(tokenStr);\n        var now = new Date();\n        console.log(+now.getTime());\n        console.log(Date.parse(item.expiry));\n\n        if (now.getTime() > Date.parse(item.expiry)) {\n          localStorage.removeItem(\"currentSession\");\n          return null;\n        }\n\n        var token = {\n          accessToken: item.value.accessToken,\n          refreshToken: item.value.refreshToken\n        };\n        return token;\n      }\n    }]);\n\n    return AuthGuard;\n  }();\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}