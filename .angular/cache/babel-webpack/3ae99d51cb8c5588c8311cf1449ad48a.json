{"ast":null,"code":"import _classCallCheck from \"/Users/jekabolt/go/src/github.com/jekabolt/grbpwr-admin-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jekabolt/go/src/github.com/jekabolt/grbpwr-admin-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport var DataService = /*#__PURE__*/(function () {\n  var DataService = /*#__PURE__*/function () {\n    function DataService(http) {\n      _classCallCheck(this, DataService);\n\n      this.http = http;\n      this.serverURL = environment.API_SERVER_URL ? environment.API_SERVER_URL : \"http://localhost:8080\";\n    } // getAllData():Observable<APIResponse> {\n    //   return this.http.get<APIResponse>(this.serverURL+'/getAllData')\n    // }\n    // writeData(data:any):Observable<APIResponse> {\n    //   return this.http.post<APIResponse>(this.serverURL+'/writeData',data,httpOptions)\n    // }\n\n\n    _createClass(DataService, [{\n      key: \"addProduct\",\n      value: function addProduct(data) {\n        return this.http.post(this.serverURL + '/product', data, httpOptions);\n      }\n    }, {\n      key: \"deleteProductById\",\n      value: function deleteProductById(id) {\n        return this.http.delete(this.serverURL + '/product/' + id, httpOptions);\n      }\n    }, {\n      key: \"getProductsById\",\n      value: function getProductsById(id) {\n        return this.http.get(this.serverURL + '/product/' + id);\n      }\n    }, {\n      key: \"getAllProducts\",\n      value: function getAllProducts() {\n        return this.http.get(this.serverURL + '/product');\n      }\n    }, {\n      key: \"modifyProductsById\",\n      value: function modifyProductsById(data) {\n        return this.http.put(this.serverURL + '/product', data, httpOptions);\n      }\n    }]);\n\n    return DataService;\n  }();\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}