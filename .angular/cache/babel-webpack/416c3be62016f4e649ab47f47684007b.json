{"ast":null,"code":"import _classCallCheck from \"/Users/jekabolt/go/src/github.com/jekabolt/grbpwr-admin-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jekabolt/go/src/github.com/jekabolt/grbpwr-admin-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment'; // models \n\nimport { Convert } from \"../models/token\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var AuthenticationService = /*#__PURE__*/(function () {\n  var AuthenticationService = /*#__PURE__*/function () {\n    function AuthenticationService(http) {\n      _classCallCheck(this, AuthenticationService);\n\n      this.http = http;\n      var token = this.getTokenWithExpiry();\n\n      if (token != null) {\n        this.currentSessionSubject = new BehaviorSubject(Convert.toToken(Convert.tokenToJson(token)));\n      }\n\n      var empty = {\n        accessToken: \"\",\n        refreshToken: \"\"\n      };\n      this.currentSessionSubject = new BehaviorSubject(empty);\n      this.currentSession = this.currentSessionSubject.asObservable();\n    }\n\n    _createClass(AuthenticationService, [{\n      key: \"currentSessionValue\",\n      get: function get() {\n        return this.currentSessionSubject.value;\n      }\n    }, {\n      key: \"login\",\n      value: function login(password) {\n        var _this = this;\n\n        return this.http.post(\"\".concat(environment.API_SERVER_URL, \"auth\"), {\n          password: password\n        }).pipe(map(function (token) {\n          // store token details and jwt token in local storage to keep token logged in between page refreshes\n          _this.setTokenWithTTL(token, 60); // localStorage.setItem('currentSession', Convert.tokenToJson(token));\n\n\n          _this.currentSessionSubject.next(token);\n\n          return token;\n        }));\n      }\n    }, {\n      key: \"loginWPassword\",\n      value: function loginWPassword(password) {\n        var _this2 = this;\n\n        return this.http.post(\"\".concat(environment.API_SERVER_URL, \"auth\"), {\n          password: password\n        }).pipe(map(function (user) {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          localStorage.setItem('currentSession', Convert.tokenToJson(user));\n\n          _this2.currentSessionSubject.next(user);\n\n          return user;\n        }));\n      }\n    }, {\n      key: \"loginWRefresh\",\n      value: function loginWRefresh(refreshToken) {\n        var _this3 = this;\n\n        return this.http.post(\"\".concat(environment.API_SERVER_URL, \"auth\"), {\n          refreshToken: refreshToken\n        }).pipe(map(function (user) {\n          localStorage.setItem('currentSession', JSON.stringify(user));\n\n          _this3.currentSessionSubject.next(user);\n\n          return user;\n        }));\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentSession');\n        this.currentSessionSubject.next(null);\n      }\n    }, {\n      key: \"setTokenWithTTL\",\n      value: function setTokenWithTTL(token, min) {\n        var item = {\n          value: token,\n          expiry: this.addMinutes(min)\n        };\n        localStorage.setItem(\"currentSession\", JSON.stringify(item));\n      }\n    }, {\n      key: \"getTokenWithExpiry\",\n      value: function getTokenWithExpiry() {\n        var tokenStr = localStorage.getItem(\"currentSession\");\n\n        if (!tokenStr) {\n          return null;\n        }\n\n        var item = JSON.parse(tokenStr);\n        var now = new Date();\n\n        if (now.getTime() > item.expiry) {\n          localStorage.removeItem(\"currentSession\");\n          return null;\n        }\n\n        var token = {\n          accessToken: item.value.accessToken,\n          refreshToken: item.value.refreshToken\n        };\n        return token;\n      }\n    }, {\n      key: \"addMinutes\",\n      value: function addMinutes(minutes) {\n        var now = new Date();\n        return new Date(now.getTime() + minutes * 60000);\n      }\n    }]);\n\n    return AuthenticationService;\n  }();\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}