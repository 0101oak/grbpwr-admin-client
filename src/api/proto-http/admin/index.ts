// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

export type GetDictionaryRequest = {
};

export type GetDictionaryResponse = {
  dictionary: common_Dictionary | undefined;
};

export type common_Dictionary = {
  categories: common_Category[] | undefined;
  measurements: common_MeasurementName[] | undefined;
  orderStatuses: common_OrderStatus[] | undefined;
  paymentMethods: common_PaymentMethod[] | undefined;
  shipmentCarriers: common_ShipmentCarrier[] | undefined;
  sizes: common_Size[] | undefined;
};

export type common_Category = {
  id: number | undefined;
  name: common_CategoryEnum | undefined;
};

export type common_CategoryEnum =
  | "CATEGORY_ENUM_UNKNOWN"
  | "CATEGORY_ENUM_T_SHIRT"
  | "CATEGORY_ENUM_JEANS"
  | "CATEGORY_ENUM_DRESS"
  | "CATEGORY_ENUM_JACKET"
  | "CATEGORY_ENUM_SWEATER"
  | "CATEGORY_ENUM_PANT"
  | "CATEGORY_ENUM_SKIRT"
  | "CATEGORY_ENUM_SHORT"
  | "CATEGORY_ENUM_BLAZER"
  | "CATEGORY_ENUM_COAT"
  | "CATEGORY_ENUM_SOCKS"
  | "CATEGORY_ENUM_UNDERWEAR"
  | "CATEGORY_ENUM_BRA"
  | "CATEGORY_ENUM_HAT"
  | "CATEGORY_ENUM_SCARF"
  | "CATEGORY_ENUM_GLOVES"
  | "CATEGORY_ENUM_SHOES"
  | "CATEGORY_ENUM_BELT"
  | "CATEGORY_ENUM_OTHER";
export type common_MeasurementName = {
  id: number | undefined;
  name: common_MeasurementNameEnum | undefined;
};

export type common_MeasurementNameEnum =
  | "MEASUREMENT_NAME_ENUM_UNKNOWN"
  | "MEASUREMENT_NAME_ENUM_WAIST"
  | "MEASUREMENT_NAME_ENUM_INSEAM"
  | "MEASUREMENT_NAME_ENUM_LENGTH"
  | "MEASUREMENT_NAME_ENUM_RISE"
  | "MEASUREMENT_NAME_ENUM_HIPS"
  | "MEASUREMENT_NAME_ENUM_SHOULDERS"
  | "MEASUREMENT_NAME_ENUM_BUST"
  | "MEASUREMENT_NAME_ENUM_SLEEVE"
  | "MEASUREMENT_NAME_ENUM_WIDTH"
  | "MEASUREMENT_NAME_ENUM_HEIGHT";
export type common_OrderStatus = {
  id: number | undefined;
  name: common_OrderStatusEnum | undefined;
};

export type common_OrderStatusEnum =
  | "ORDER_STATUS_ENUM_UNKNOWN"
  | "ORDER_STATUS_ENUM_PLACED"
  | "ORDER_STATUS_ENUM_CONFIRMED"
  | "ORDER_STATUS_ENUM_SHIPPED"
  | "ORDER_STATUS_ENUM_DELIVERED"
  | "ORDER_STATUS_ENUM_CANCELLED"
  | "ORDER_STATUS_ENUM_REFUNDED";
// PaymentMethod represents the payment_method table
export type common_PaymentMethod = {
  id: number | undefined;
  name: common_PaymentMethodNameEnum | undefined;
};

export type common_PaymentMethodNameEnum =
  | "PAYMENT_METHOD_NAME_ENUM_UNKNOWN"
  | "PAYMENT_METHOD_NAME_ENUM_CARD"
  | "PAYMENT_METHOD_NAME_ENUM_ETH"
  | "PAYMENT_METHOD_NAME_ENUM_USDC"
  | "PAYMENT_METHOD_NAME_ENUM_USDT";
export type common_ShipmentCarrier = {
  id: number | undefined;
  shipmentCarrier: common_ShipmentCarrierInsert | undefined;
};

export type common_ShipmentCarrierInsert = {
  carrier: string | undefined;
  price: googletype_Decimal | undefined;
  allowed: boolean | undefined;
};

// A representation of a decimal value, such as 2.5. Clients may convert values
// into language-native decimal formats, such as Java's [BigDecimal][] or
// Python's [decimal.Decimal][].
// [BigDecimal]:
// https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
// [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
export type googletype_Decimal = {
  // The decimal value, as a string.
  // The string representation consists of an optional sign, `+` (`U+002B`)
  // or `-` (`U+002D`), followed by a sequence of zero or more decimal digits
  // ("the integer"), optionally followed by a fraction, optionally followed
  // by an exponent.
  // The fraction consists of a decimal point followed by zero or more decimal
  // digits. The string must contain at least one digit in either the integer
  // or the fraction. The number formed by the sign, the integer and the
  // fraction is referred to as the significand.
  // The exponent consists of the character `e` (`U+0065`) or `E` (`U+0045`)
  // followed by one or more decimal digits.
  // Services **should** normalize decimal values before storing them by:
  // - Removing an explicitly-provided `+` sign (`+2.5` -> `2.5`).
  // - Replacing a zero-length integer value with `0` (`.5` -> `0.5`).
  // - Coercing the exponent character to lower-case (`2.5E8` -> `2.5e8`).
  // - Removing an explicitly-provided zero exponent (`2.5e0` -> `2.5`).
  // Services **may** perform additional normalization based on its own needs
  // and the internal decimal implementation selected, such as shifting the
  // decimal point and exponent value together (example: `2.5e-1` <-> `0.25`).
  // Additionally, services **may** preserve trailing zeroes in the fraction
  // to indicate increased precision, but are not required to do so.
  // Note that only the `.` character is supported to divide the integer
  // and the fraction; `,` **should not** be supported regardless of locale.
  // Additionally, thousand separators **should not** be supported. If a
  // service does support them, values **must** be normalized.
  // The ENBF grammar is:
  // DecimalString =
  // [Sign] Significand [Exponent];
  // Sign = '+' | '-';
  // Significand =
  // Digits ['.'] [Digits] | [Digits] '.' Digits;
  // Exponent = ('e' | 'E') [Sign] Digits;
  // Digits = { '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' };
  // Services **should** clearly document the range of supported values, the
  // maximum supported precision (total number of digits), and, if applicable,
  // the scale (number of digits after the decimal point), as well as how it
  // behaves when receiving out-of-bounds values.
  // Services **may** choose to accept values passed as input even when the
  // value has a higher precision or scale than the service supports, and
  // **should** round the value to fit the supported scale. Alternatively, the
  // service **may** error with `400 Bad Request` (`INVALID_ARGUMENT` in gRPC)
  // if precision would be lost.
  // Services **should** error with `400 Bad Request` (`INVALID_ARGUMENT` in
  // gRPC) if the service receives a value outside of the supported range.
  value: string | undefined;
};

export type common_Size = {
  id: number | undefined;
  name: common_SizeEnum | undefined;
};

export type common_SizeEnum =
  | "SIZE_ENUM_UNKNOWN"
  | "SIZE_ENUM_XXS"
  | "SIZE_ENUM_XS"
  | "SIZE_ENUM_S"
  | "SIZE_ENUM_M"
  | "SIZE_ENUM_L"
  | "SIZE_ENUM_XL"
  | "SIZE_ENUM_XXL"
  | "SIZE_ENUM_OS";
export type UploadContentImageRequest = {
  rawB64Image: string | undefined;
  folder: string | undefined;
  imageName: string | undefined;
};

export type UploadContentImageResponse = {
  media: common_Media | undefined;
};

export type common_Media = {
  // Media ID
  id: number | undefined;
  // Media created date
  createdAt: wellKnownTimestamp | undefined;
  // media
  media: common_MediaInsert | undefined;
};

// Encoded using RFC 3339, where generated output will always be Z-normalized
// and uses 0, 3, 6 or 9 fractional digits.
// Offsets other than "Z" are also accepted.
type wellKnownTimestamp = string;

export type common_MediaInsert = {
  // Full-size media URL
  fullSize: string | undefined;
  // Thumbnail media URL
  thumbnail: string | undefined;
  // Compressed media URL
  compressed: string | undefined;
};

export type UploadContentVideoRequest = {
  raw: string | undefined;
  folder: string | undefined;
  videoName: string | undefined;
  contentType: string | undefined;
};

export type UploadContentVideoResponse = {
  media: common_Media | undefined;
};

export type ListObjectsPagedRequest = {
  limit: number | undefined;
  offset: number | undefined;
  orderFactor: common_OrderFactor | undefined;
};

export type common_OrderFactor =
  | "ORDER_FACTOR_UNKNOWN"
  | "ORDER_FACTOR_ASC"
  | "ORDER_FACTOR_DESC";
export type ListObjectsPagedResponse = {
  list: common_Media[] | undefined;
};

export type DeleteFromBucketRequest = {
  id: number | undefined;
};

export type DeleteFromBucketResponse = {
};

export type AddProductRequest = {
  product: common_ProductNew | undefined;
};

export type common_ProductNew = {
  product: common_ProductInsert | undefined;
  sizeMeasurements: common_SizeWithMeasurementInsert[] | undefined;
  media: common_ProductMediaInsert[] | undefined;
  tags: common_ProductTagInsert[] | undefined;
};

export type common_ProductInsert = {
  preorder: string | undefined;
  name: string | undefined;
  brand: string | undefined;
  sku: string | undefined;
  color: string | undefined;
  colorHex: string | undefined;
  countryOfOrigin: string | undefined;
  thumbnail: string | undefined;
  price: googletype_Decimal | undefined;
  salePercentage: googletype_Decimal | undefined;
  categoryId: number | undefined;
  description: string | undefined;
  hidden: boolean | undefined;
  targetGender: common_GenderEnum | undefined;
};

export type common_GenderEnum =
  | "GENDER_ENUM_UNKNOWN"
  | "GENDER_ENUM_MALE"
  | "GENDER_ENUM_FEMALE"
  | "GENDER_ENUM_UNISEX";
export type common_SizeWithMeasurementInsert = {
  productSize: common_ProductSizeInsert | undefined;
  measurements: common_ProductMeasurementInsert[] | undefined;
};

export type common_ProductSizeInsert = {
  quantity: googletype_Decimal | undefined;
  sizeId: number | undefined;
};

export type common_ProductMeasurementInsert = {
  measurementNameId: number | undefined;
  measurementValue: googletype_Decimal | undefined;
};

export type common_ProductMediaInsert = {
  fullSize: string | undefined;
  thumbnail: string | undefined;
  compressed: string | undefined;
};

export type common_ProductTagInsert = {
  tag: string | undefined;
};

export type AddProductResponse = {
  product: common_ProductFull | undefined;
};

export type common_ProductFull = {
  product: common_Product | undefined;
  sizes: common_ProductSize[] | undefined;
  measurements: common_ProductMeasurement[] | undefined;
  media: common_ProductMedia[] | undefined;
  tags: common_ProductTag[] | undefined;
};

export type common_Product = {
  id: number | undefined;
  createdAt: wellKnownTimestamp | undefined;
  updatedAt: wellKnownTimestamp | undefined;
  productInsert: common_ProductInsert | undefined;
};

export type common_ProductSize = {
  id: number | undefined;
  quantity: googletype_Decimal | undefined;
  productId: number | undefined;
  sizeId: number | undefined;
};

export type common_ProductMeasurement = {
  id: number | undefined;
  productId: number | undefined;
  productSizeId: number | undefined;
  measurementNameId: number | undefined;
  measurementValue: googletype_Decimal | undefined;
};

export type common_ProductMedia = {
  id: number | undefined;
  createdAt: wellKnownTimestamp | undefined;
  productId: number | undefined;
  productMediaInsert: common_ProductMediaInsert | undefined;
};

export type common_ProductTag = {
  id: number | undefined;
  productId: number | undefined;
  productTagInsert: common_ProductTagInsert | undefined;
};

export type GetProductsPagedRequest = {
  limit: number | undefined;
  offset: number | undefined;
  sortFactors: common_SortFactor[] | undefined;
  orderFactor: common_OrderFactor | undefined;
  filterConditions: common_FilterConditions | undefined;
  showHidden: boolean | undefined;
};

export type common_SortFactor =
  | "SORT_FACTOR_UNKNOWN"
  | "SORT_FACTOR_CREATED_AT"
  | "SORT_FACTOR_UPDATED_AT"
  | "SORT_FACTOR_NAME"
  | "SORT_FACTOR_PRICE";
export type common_FilterConditions = {
  priceFromTo: common_PriceFromTo | undefined;
  onSale: boolean | undefined;
  color: string | undefined;
  categoryId: number | undefined;
  sizesIds: number[] | undefined;
  preorder: boolean | undefined;
  byTag: string | undefined;
};

export type common_PriceFromTo = {
  from: googletype_Decimal | undefined;
  to: googletype_Decimal | undefined;
};

export type GetProductsPagedResponse = {
  products: common_Product[] | undefined;
};

export type GetProductByIDRequest = {
  id: number | undefined;
};

export type GetProductByIDResponse = {
  product: common_ProductFull | undefined;
};

export type DeleteProductByIDRequest = {
  id: number | undefined;
};

export type DeleteProductByIDResponse = {
};

export type HideProductByIDRequest = {
  id: number | undefined;
  hide: boolean | undefined;
};

export type HideProductByIDResponse = {
};

export type SetSaleByIDRequest = {
  id: number | undefined;
  salePercent: googletype_Decimal | undefined;
};

export type SetSaleByIDResponse = {
};

export type ReduceStockForProductSizesRequest = {
  items: common_OrderItem[] | undefined;
};

export type common_OrderItem = {
  id: number | undefined;
  orderId: number | undefined;
  orderItem: common_OrderItemInsert | undefined;
};

export type common_OrderItemInsert = {
  productId: number | undefined;
  quantity: number | undefined;
  sizeId: number | undefined;
};

export type ReduceStockForProductSizesResponse = {
};

export type RestoreStockForProductSizesRequest = {
  items: common_OrderItem[] | undefined;
};

export type RestoreStockForProductSizesResponse = {
};

export type UpdateProductPreorderRequest = {
  productId: number | undefined;
  preorder: string | undefined;
};

export type UpdateProductPreorderResponse = {
};

export type UpdateProductNameRequest = {
  productId: number | undefined;
  name: string | undefined;
};

export type UpdateProductNameResponse = {
};

export type UpdateProductSKURequest = {
  productId: number | undefined;
  sku: string | undefined;
};

export type UpdateProductSKUResponse = {
};

export type UpdateProductColorAndColorHexRequest = {
  productId: number | undefined;
  color: string | undefined;
  colorHex: string | undefined;
};

export type UpdateProductColorAndColorHexResponse = {
};

export type UpdateProductCountryOfOriginRequest = {
  productId: number | undefined;
  countryOfOrigin: string | undefined;
};

export type UpdateProductCountryOfOriginResponse = {
};

export type UpdateProductBrandRequest = {
  productId: number | undefined;
  brand: string | undefined;
};

export type UpdateProductBrandResponse = {
};

export type UpdateProductTargetGenderRequest = {
  productId: number | undefined;
  gender: common_GenderEnum | undefined;
};

export type UpdateProductTargetGenderResponse = {
};

export type UpdateProductThumbnailRequest = {
  productId: number | undefined;
  thumbnail: string | undefined;
};

export type UpdateProductThumbnailResponse = {
};

export type UpdateProductPriceRequest = {
  productId: number | undefined;
  price: googletype_Decimal | undefined;
};

export type UpdateProductPriceResponse = {
};

export type UpdateProductSaleRequest = {
  productId: number | undefined;
  sale: googletype_Decimal | undefined;
};

export type UpdateProductSaleResponse = {
};

export type UpdateProductCategoryRequest = {
  productId: number | undefined;
  categoryId: number | undefined;
};

export type UpdateProductCategoryResponse = {
};

export type UpdateProductDescriptionRequest = {
  productId: number | undefined;
  description: string | undefined;
};

export type UpdateProductDescriptionResponse = {
};

export type DeleteProductMeasurementRequest = {
  id: number | undefined;
};

export type DeleteProductMeasurementResponse = {
};

export type AddProductMeasurementRequest = {
  productId: number | undefined;
  sizeId: number | undefined;
  measurementNameId: number | undefined;
  measurementValue: googletype_Decimal | undefined;
};

export type AddProductMeasurementResponse = {
};

export type UpdateProductSizeStockRequest = {
  productId: number | undefined;
  sizeId: number | undefined;
  quantity: number | undefined;
};

export type UpdateProductSizeStockResponse = {
};

export type DeleteProductMediaRequest = {
  productMediaId: number | undefined;
};

export type DeleteProductMediaResponse = {
};

export type AddProductMediaRequest = {
  productId: number | undefined;
  fullSize: string | undefined;
  thumbnail: string | undefined;
  compressed: string | undefined;
};

export type AddProductMediaResponse = {
};

export type AddProductTagRequest = {
  productId: number | undefined;
  tag: string | undefined;
};

export type AddProductTagResponse = {
};

export type DeleteProductTagRequest = {
  productId: number | undefined;
  tag: string | undefined;
};

export type DeleteProductTagResponse = {
};

export type AddPromoRequest = {
  promo: common_PromoCodeInsert | undefined;
};

// PromoCodeInsert represents the nested structure within PromoCode
export type common_PromoCodeInsert = {
  code: string | undefined;
  freeShipping: boolean | undefined;
  discount: googletype_Decimal | undefined;
  expiration: wellKnownTimestamp | undefined;
  allowed: boolean | undefined;
};

export type AddPromoResponse = {
};

export type ListPromosRequest = {
};

export type ListPromosResponse = {
  promoCodes: common_PromoCode[] | undefined;
};

// PromoCode represents the promo_code table
export type common_PromoCode = {
  id: number | undefined;
  promoCodeInsert: common_PromoCodeInsert | undefined;
};

export type DeletePromoCodeRequest = {
  code: string | undefined;
};

export type DeletePromoCodeResponse = {
};

export type DisablePromoCodeRequest = {
  code: string | undefined;
};

export type DisablePromoCodeResponse = {
};

export type CreateOrderRequest = {
  order: common_OrderNew | undefined;
};

export type common_OrderNew = {
  items: common_OrderItemInsert[] | undefined;
  shippingAddress: common_AddressInsert | undefined;
  billingAddress: common_AddressInsert | undefined;
  buyer: common_BuyerInsert | undefined;
  paymentMethodId: number | undefined;
  shipmentCarrierId: number | undefined;
  promoCode: string | undefined;
};

export type common_AddressInsert = {
  street: string | undefined;
  houseNumber: string | undefined;
  apartmentNumber: string | undefined;
  city: string | undefined;
  state: string | undefined;
  country: string | undefined;
  postalCode: string | undefined;
};

export type common_BuyerInsert = {
  firstName: string | undefined;
  lastName: string | undefined;
  email: string | undefined;
  phone: string | undefined;
  receivePromoEmails: boolean | undefined;
};

export type CreateOrderResponse = {
  order: common_Order | undefined;
};

export type common_Order = {
  id: number | undefined;
  buyerId: number | undefined;
  placed: wellKnownTimestamp | undefined;
  modified: wellKnownTimestamp | undefined;
  paymentId: number | undefined;
  totalPrice: googletype_Decimal | undefined;
  orderStatusId: number | undefined;
  shipmentId: number | undefined;
  promoId: number | undefined;
};

export type ApplyPromoCodeRequest = {
  orderId: number | undefined;
  promoCode: string | undefined;
};

export type ApplyPromoCodeResponse = {
  total: googletype_Decimal | undefined;
};

export type UpdateOrderItemsRequest = {
  orderId: number | undefined;
  items: common_OrderItemInsert[] | undefined;
};

export type UpdateOrderItemsResponse = {
  total: googletype_Decimal | undefined;
};

export type UpdateOrderShippingCarrierRequest = {
  orderId: number | undefined;
  shippingCarrierId: number | undefined;
};

export type UpdateOrderShippingCarrierResponse = {
  total: googletype_Decimal | undefined;
};

export type OrderPaymentDoneRequest = {
  orderId: number | undefined;
  payment: common_PaymentInsert | undefined;
};

export type common_PaymentInsert = {
  paymentMethodId: number | undefined;
  transactionId: string | undefined;
  transactionAmount: googletype_Decimal | undefined;
  payer: string | undefined;
  payee: string | undefined;
  isTransactionDone: boolean | undefined;
};

export type OrderPaymentDoneResponse = {
};

export type UpdateShippingInfoRequest = {
  orderId: number | undefined;
  shippingInfo: common_Shipment | undefined;
};

// Shipment represents the shipment table
export type common_Shipment = {
  id: number | undefined;
  createdAt: wellKnownTimestamp | undefined;
  updatedAt: wellKnownTimestamp | undefined;
  carrierId: number | undefined;
  trackingCode: string | undefined;
  shippingDate: wellKnownTimestamp | undefined;
  estimatedArrivalDate: wellKnownTimestamp | undefined;
};

export type UpdateShippingInfoResponse = {
};

export type GetOrderByIdRequest = {
  orderId: number | undefined;
};

export type GetOrderByIdResponse = {
  order: common_OrderFull | undefined;
};

export type common_OrderFull = {
  order: common_Order | undefined;
  orderItems: common_OrderItem[] | undefined;
  payment: common_Payment | undefined;
  paymentMethod: common_PaymentMethod | undefined;
  shipment: common_Shipment | undefined;
  shipmentCarrier: common_ShipmentCarrier | undefined;
  promoCode: common_PromoCode | undefined;
  orderStatus: common_OrderStatus | undefined;
  buyer: common_Buyer | undefined;
  billing: common_Address | undefined;
  shipping: common_Address | undefined;
  placed: wellKnownTimestamp | undefined;
  modified: wellKnownTimestamp | undefined;
  totalPrice: googletype_Decimal | undefined;
};

// Payment represents the payment table
export type common_Payment = {
  id: number | undefined;
  createdAt: wellKnownTimestamp | undefined;
  modifiedAt: wellKnownTimestamp | undefined;
  paymentInsert: common_PaymentInsert | undefined;
};

export type common_Buyer = {
  id: number | undefined;
  billingAddressId: number | undefined;
  shippingAddressId: number | undefined;
  buyerInsert: common_BuyerInsert | undefined;
};

export type common_Address = {
  id: number | undefined;
  addressInsert: common_AddressInsert | undefined;
};

export type GetOrdersByEmailRequest = {
  email: string | undefined;
};

export type GetOrdersByEmailResponse = {
  orders: common_OrderFull[] | undefined;
};

export type GetOrdersByStatusRequest = {
  status: common_OrderStatusEnum | undefined;
};

export type GetOrdersByStatusResponse = {
  orders: common_OrderFull[] | undefined;
};

export type RefundOrderRequest = {
  orderId: number | undefined;
};

export type RefundOrderResponse = {
};

export type DeliveredOrderRequest = {
  orderId: number | undefined;
};

export type DeliveredOrderResponse = {
};

export type CancelOrderRequest = {
  orderId: number | undefined;
};

export type CancelOrderResponse = {
};

export interface AdminService {
  GetDictionary(request: GetDictionaryRequest): Promise<GetDictionaryResponse>;
  // UploadContentImage uploads an image to a specific folder with a specified name.
  UploadContentImage(request: UploadContentImageRequest): Promise<UploadContentImageResponse>;
  // UploadContentVideo uploads a video to a specific folder with a specified name.
  UploadContentVideo(request: UploadContentVideoRequest): Promise<UploadContentVideoResponse>;
  // DeleteFromBucket deletes objects specified by their keys.
  DeleteFromBucket(request: DeleteFromBucketRequest): Promise<DeleteFromBucketResponse>;
  // ListObjectsPaged lists all objects in the base folder.
  ListObjectsPaged(request: ListObjectsPagedRequest): Promise<ListObjectsPagedResponse>;
  AddProduct(request: AddProductRequest): Promise<AddProductResponse>;
  GetProductsPaged(request: GetProductsPagedRequest): Promise<GetProductsPagedResponse>;
  GetProductByID(request: GetProductByIDRequest): Promise<GetProductByIDResponse>;
  DeleteProductByID(request: DeleteProductByIDRequest): Promise<DeleteProductByIDResponse>;
  HideProductByID(request: HideProductByIDRequest): Promise<HideProductByIDResponse>;
  SetSaleByID(request: SetSaleByIDRequest): Promise<SetSaleByIDResponse>;
  ReduceStockForProductSizes(request: ReduceStockForProductSizesRequest): Promise<ReduceStockForProductSizesResponse>;
  RestoreStockForProductSizes(request: RestoreStockForProductSizesRequest): Promise<RestoreStockForProductSizesResponse>;
  UpdateProductPreorder(request: UpdateProductPreorderRequest): Promise<UpdateProductPreorderResponse>;
  UpdateProductName(request: UpdateProductNameRequest): Promise<UpdateProductNameResponse>;
  UpdateProductSKU(request: UpdateProductSKURequest): Promise<UpdateProductSKUResponse>;
  UpdateProductColorAndColorHex(request: UpdateProductColorAndColorHexRequest): Promise<UpdateProductColorAndColorHexResponse>;
  UpdateProductCountryOfOrigin(request: UpdateProductCountryOfOriginRequest): Promise<UpdateProductCountryOfOriginResponse>;
  UpdateProductBrand(request: UpdateProductBrandRequest): Promise<UpdateProductBrandResponse>;
  UpdateProductTargetGender(request: UpdateProductTargetGenderRequest): Promise<UpdateProductTargetGenderResponse>;
  UpdateProductThumbnail(request: UpdateProductThumbnailRequest): Promise<UpdateProductThumbnailResponse>;
  UpdateProductPrice(request: UpdateProductPriceRequest): Promise<UpdateProductPriceResponse>;
  UpdateProductSale(request: UpdateProductSaleRequest): Promise<UpdateProductSaleResponse>;
  UpdateProductCategory(request: UpdateProductCategoryRequest): Promise<UpdateProductCategoryResponse>;
  UpdateProductDescription(request: UpdateProductDescriptionRequest): Promise<UpdateProductDescriptionResponse>;
  DeleteProductMeasurement(request: DeleteProductMeasurementRequest): Promise<DeleteProductMeasurementResponse>;
  AddProductMeasurement(request: AddProductMeasurementRequest): Promise<AddProductMeasurementResponse>;
  UpdateProductSizeStock(request: UpdateProductSizeStockRequest): Promise<UpdateProductSizeStockResponse>;
  DeleteProductMedia(request: DeleteProductMediaRequest): Promise<DeleteProductMediaResponse>;
  AddProductMedia(request: AddProductMediaRequest): Promise<AddProductMediaResponse>;
  AddProductTag(request: AddProductTagRequest): Promise<AddProductTagResponse>;
  DeleteProductTag(request: DeleteProductTagRequest): Promise<DeleteProductTagResponse>;
  AddPromo(request: AddPromoRequest): Promise<AddPromoResponse>;
  ListPromos(request: ListPromosRequest): Promise<ListPromosResponse>;
  DeletePromoCode(request: DeletePromoCodeRequest): Promise<DeletePromoCodeResponse>;
  DisablePromoCode(request: DisablePromoCodeRequest): Promise<DisablePromoCodeResponse>;
  CreateOrder(request: CreateOrderRequest): Promise<CreateOrderResponse>;
  ApplyPromoCode(request: ApplyPromoCodeRequest): Promise<ApplyPromoCodeResponse>;
  UpdateOrderItems(request: UpdateOrderItemsRequest): Promise<UpdateOrderItemsResponse>;
  UpdateOrderShippingCarrier(request: UpdateOrderShippingCarrierRequest): Promise<UpdateOrderShippingCarrierResponse>;
  OrderPaymentDone(request: OrderPaymentDoneRequest): Promise<OrderPaymentDoneResponse>;
  UpdateShippingInfo(request: UpdateShippingInfoRequest): Promise<UpdateShippingInfoResponse>;
  GetOrderById(request: GetOrderByIdRequest): Promise<GetOrderByIdResponse>;
  GetOrdersByEmail(request: GetOrdersByEmailRequest): Promise<GetOrdersByEmailResponse>;
  GetOrdersByStatus(request: GetOrdersByStatusRequest): Promise<GetOrdersByStatusResponse>;
  RefundOrder(request: RefundOrderRequest): Promise<RefundOrderResponse>;
  DeliveredOrder(request: DeliveredOrderRequest): Promise<DeliveredOrderResponse>;
  CancelOrder(request: CancelOrderRequest): Promise<CancelOrderResponse>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createAdminServiceClient(
  handler: RequestHandler
): AdminService {
  return {
    GetDictionary(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/dictionary`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "GetDictionary",
      }) as Promise<GetDictionaryResponse>;
    },
    UploadContentImage(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/content/image`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UploadContentImage",
      }) as Promise<UploadContentImageResponse>;
    },
    UploadContentVideo(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/content/video`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UploadContentVideo",
      }) as Promise<UploadContentVideoResponse>;
    },
    DeleteFromBucket(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/content`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.id) {
        queryParams.push(`id=${encodeURIComponent(request.id.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AdminService",
        method: "DeleteFromBucket",
      }) as Promise<DeleteFromBucketResponse>;
    },
    ListObjectsPaged(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/content`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.limit) {
        queryParams.push(`limit=${encodeURIComponent(request.limit.toString())}`)
      }
      if (request.offset) {
        queryParams.push(`offset=${encodeURIComponent(request.offset.toString())}`)
      }
      if (request.orderFactor) {
        queryParams.push(`orderFactor=${encodeURIComponent(request.orderFactor.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "ListObjectsPaged",
      }) as Promise<ListObjectsPagedResponse>;
    },
    AddProduct(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/product/add`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "AddProduct",
      }) as Promise<AddProductResponse>;
    },
    GetProductsPaged(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.limit) {
        throw new Error("missing required field request.limit");
      }
      if (!request.offset) {
        throw new Error("missing required field request.offset");
      }
      if (!request.orderFactor) {
        throw new Error("missing required field request.order_factor");
      }
      const path = `api/admin/product/paged/${request.limit}/${request.offset}/${request.orderFactor}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.sortFactors) {
        request.sortFactors.forEach((x) => {
          queryParams.push(`sortFactors=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.filterConditions?.priceFromTo?.from?.value) {
        queryParams.push(`filterConditions.priceFromTo.from.value=${encodeURIComponent(request.filterConditions.priceFromTo.from.value.toString())}`)
      }
      if (request.filterConditions?.onSale) {
        queryParams.push(`filterConditions.onSale=${encodeURIComponent(request.filterConditions.onSale.toString())}`)
      }
      if (request.filterConditions?.color) {
        queryParams.push(`filterConditions.color=${encodeURIComponent(request.filterConditions.color.toString())}`)
      }
      if (request.filterConditions?.categoryId) {
        queryParams.push(`filterConditions.categoryId=${encodeURIComponent(request.filterConditions.categoryId.toString())}`)
      }
      if (request.filterConditions?.sizesIds) {
        request.filterConditions.sizesIds.forEach((x) => {
          queryParams.push(`filterConditions.sizesIds=${encodeURIComponent(x.toString())}`)
        })
      }
      if (request.filterConditions?.preorder) {
        queryParams.push(`filterConditions.preorder=${encodeURIComponent(request.filterConditions.preorder.toString())}`)
      }
      if (request.filterConditions?.byTag) {
        queryParams.push(`filterConditions.byTag=${encodeURIComponent(request.filterConditions.byTag.toString())}`)
      }
      if (request.showHidden) {
        queryParams.push(`showHidden=${encodeURIComponent(request.showHidden.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "GetProductsPaged",
      }) as Promise<GetProductsPagedResponse>;
    },
    GetProductByID(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/admin/product/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "GetProductByID",
      }) as Promise<GetProductByIDResponse>;
    },
    DeleteProductByID(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/admin/product/${request.id}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AdminService",
        method: "DeleteProductByID",
      }) as Promise<DeleteProductByIDResponse>;
    },
    HideProductByID(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/admin/product/${request.id}/hide`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "HideProductByID",
      }) as Promise<HideProductByIDResponse>;
    },
    SetSaleByID(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/admin/product/${request.id}/set/sale`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "SetSaleByID",
      }) as Promise<SetSaleByIDResponse>;
    },
    ReduceStockForProductSizes(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/product/reducestock`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "ReduceStockForProductSizes",
      }) as Promise<ReduceStockForProductSizesResponse>;
    },
    RestoreStockForProductSizes(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/product/restorestock`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "RestoreStockForProductSizes",
      }) as Promise<RestoreStockForProductSizesResponse>;
    },
    UpdateProductPreorder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatepreorder`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductPreorder",
      }) as Promise<UpdateProductPreorderResponse>;
    },
    UpdateProductName(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatename`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductName",
      }) as Promise<UpdateProductNameResponse>;
    },
    UpdateProductSKU(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updateSKU`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductSKU",
      }) as Promise<UpdateProductSKUResponse>;
    },
    UpdateProductColorAndColorHex(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatecolor`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductColorAndColorHex",
      }) as Promise<UpdateProductColorAndColorHexResponse>;
    },
    UpdateProductCountryOfOrigin(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatecountry`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductCountryOfOrigin",
      }) as Promise<UpdateProductCountryOfOriginResponse>;
    },
    UpdateProductBrand(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatebrand`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductBrand",
      }) as Promise<UpdateProductBrandResponse>;
    },
    UpdateProductTargetGender(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updategender`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductTargetGender",
      }) as Promise<UpdateProductTargetGenderResponse>;
    },
    UpdateProductThumbnail(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatethumbnail`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductThumbnail",
      }) as Promise<UpdateProductThumbnailResponse>;
    },
    UpdateProductPrice(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updateprice`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductPrice",
      }) as Promise<UpdateProductPriceResponse>;
    },
    UpdateProductSale(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatesale`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductSale",
      }) as Promise<UpdateProductSaleResponse>;
    },
    UpdateProductCategory(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatecategory`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductCategory",
      }) as Promise<UpdateProductCategoryResponse>;
    },
    UpdateProductDescription(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/updatedescription`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductDescription",
      }) as Promise<UpdateProductDescriptionResponse>;
    },
    DeleteProductMeasurement(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.id) {
        throw new Error("missing required field request.id");
      }
      const path = `api/admin/product/measurement/${request.id}/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AdminService",
        method: "DeleteProductMeasurement",
      }) as Promise<DeleteProductMeasurementResponse>;
    },
    AddProductMeasurement(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/product/measurement/add`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "AddProductMeasurement",
      }) as Promise<AddProductMeasurementResponse>;
    },
    UpdateProductSizeStock(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      if (!request.sizeId) {
        throw new Error("missing required field request.size_id");
      }
      const path = `api/admin/product/${request.productId}/size/${request.sizeId}/updatestock`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateProductSizeStock",
      }) as Promise<UpdateProductSizeStockResponse>;
    },
    DeleteProductMedia(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productMediaId) {
        throw new Error("missing required field request.product_media_id");
      }
      const path = `api/admin/product/media/${request.productMediaId}/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AdminService",
        method: "DeleteProductMedia",
      }) as Promise<DeleteProductMediaResponse>;
    },
    AddProductMedia(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/media/add`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "AddProductMedia",
      }) as Promise<AddProductMediaResponse>;
    },
    AddProductTag(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      const path = `api/admin/product/${request.productId}/tag/add`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "AddProductTag",
      }) as Promise<AddProductTagResponse>;
    },
    DeleteProductTag(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.productId) {
        throw new Error("missing required field request.product_id");
      }
      if (!request.tag) {
        throw new Error("missing required field request.tag");
      }
      const path = `api/admin/product/${request.productId}/tag/${request.tag}/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AdminService",
        method: "DeleteProductTag",
      }) as Promise<DeleteProductTagResponse>;
    },
    AddPromo(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/promo/add`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "AddPromo",
      }) as Promise<AddPromoResponse>;
    },
    ListPromos(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/admin/promo/list`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "ListPromos",
      }) as Promise<ListPromosResponse>;
    },
    DeletePromoCode(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.code) {
        throw new Error("missing required field request.code");
      }
      const path = `api/admin/promo/${request.code}/delete`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AdminService",
        method: "DeletePromoCode",
      }) as Promise<DeletePromoCodeResponse>;
    },
    DisablePromoCode(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.code) {
        throw new Error("missing required field request.code");
      }
      const path = `api/admin/promo/${request.code}/disable`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "DisablePromoCode",
      }) as Promise<DisablePromoCodeResponse>;
    },
    CreateOrder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/api/admin/orders/create`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "CreateOrder",
      }) as Promise<CreateOrderResponse>;
    },
    ApplyPromoCode(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/apply-promo`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "ApplyPromoCode",
      }) as Promise<ApplyPromoCodeResponse>;
    },
    UpdateOrderItems(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/update-items`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateOrderItems",
      }) as Promise<UpdateOrderItemsResponse>;
    },
    UpdateOrderShippingCarrier(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/update-shipping-carrier`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateOrderShippingCarrier",
      }) as Promise<UpdateOrderShippingCarrierResponse>;
    },
    OrderPaymentDone(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/payment-done`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "OrderPaymentDone",
      }) as Promise<OrderPaymentDoneResponse>;
    },
    UpdateShippingInfo(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/update-shipping-info`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "UpdateShippingInfo",
      }) as Promise<UpdateShippingInfoResponse>;
    },
    GetOrderById(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "GetOrderById",
      }) as Promise<GetOrderByIdResponse>;
    },
    GetOrdersByEmail(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.email) {
        throw new Error("missing required field request.email");
      }
      const path = `api/api/admin/orders/by-email/${request.email}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "GetOrdersByEmail",
      }) as Promise<GetOrdersByEmailResponse>;
    },
    GetOrdersByStatus(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.status) {
        throw new Error("missing required field request.status");
      }
      const path = `api/api/admin/orders/by-status/${request.status}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "GET",
        body,
      }, {
        service: "AdminService",
        method: "GetOrdersByStatus",
      }) as Promise<GetOrdersByStatusResponse>;
    },
    RefundOrder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/refund`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "RefundOrder",
      }) as Promise<RefundOrderResponse>;
    },
    DeliveredOrder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/delivered`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "DeliveredOrder",
      }) as Promise<DeliveredOrderResponse>;
    },
    CancelOrder(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.orderId) {
        throw new Error("missing required field request.order_id");
      }
      const path = `api/api/admin/orders/${request.orderId}/cancel`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AdminService",
        method: "CancelOrder",
      }) as Promise<CancelOrderResponse>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
