// Code generated by protoc-gen-typescript-http. DO NOT EDIT.
/* eslint-disable camelcase */

// LoginRequest is the request message for the Login RPC.
export type LoginRequest = {
  // username is the username of the user.
  username: string | undefined;
  // password is the password of the user.
  password: string | undefined;
};

export type LoginResponse = {
  // token is the JWT token for the user.
  authToken: string | undefined;
};

// User is the user account. used for creating new users.
export type User = {
  username: string | undefined;
  password: string | undefined;
};

export type CreateRequest = {
  // User to add.
  user: User | undefined;
  // Admin password.
  masterPassword: string | undefined;
};

export type CreateResponse = {
  // aurt_token is the JWT token for the user.
  authToken: string | undefined;
};

export type DeleteRequest = {
  // username is the username of the user to delete.
  username: string | undefined;
  // adminPassword is the admin password.
  masterPassword: string | undefined;
};

export type DeleteResponse = {
};

export type ChangePasswordRequest = {
  // username is the username of the user.
  username: string | undefined;
  // current_password is the current password of the user.
  currentPassword: string | undefined;
  // new password
  newPassword: string | undefined;
};

// ChangePasswordResponse is the response message for the ChangePassword RPC.
export type ChangePasswordResponse = {
  // auth_token is the JWT token for the user.
  authToken: string | undefined;
};

export interface AuthService {
  // Authenticate a user. Returns a JWT token if the user is authenticated.
  Login(request: LoginRequest): Promise<LoginResponse>;
  // Create a new user account. Can be used only with admin privileges.
  Create(request: CreateRequest): Promise<CreateResponse>;
  // Delete user account. Can be used only with admin privileges.
  Delete(request: DeleteRequest): Promise<DeleteResponse>;
  // ChangePassword changes the password for the user. Can be updated by user or admin.
  ChangePassword(request: ChangePasswordRequest): Promise<ChangePasswordResponse>;
}

type RequestType = {
  path: string;
  method: string;
  body: string | null;
};

type RequestHandler = (request: RequestType, meta: { service: string, method: string }) => Promise<unknown>;

export function createAuthServiceClient(
  handler: RequestHandler
): AuthService {
  return {
    Login(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/auth/login`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AuthService",
        method: "Login",
      }) as Promise<LoginResponse>;
    },
    Create(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/auth/create`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "POST",
        body,
      }, {
        service: "AuthService",
        method: "Create",
      }) as Promise<CreateResponse>;
    },
    Delete(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      if (!request.username) {
        throw new Error("missing required field request.username");
      }
      const path = `api/auth/delete/${request.username}`; // eslint-disable-line quotes
      const body = null;
      const queryParams: string[] = [];
      if (request.masterPassword) {
        queryParams.push(`masterPassword=${encodeURIComponent(request.masterPassword.toString())}`)
      }
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "DELETE",
        body,
      }, {
        service: "AuthService",
        method: "Delete",
      }) as Promise<DeleteResponse>;
    },
    ChangePassword(request) { // eslint-disable-line @typescript-eslint/no-unused-vars
      const path = `api/auth/change-password`; // eslint-disable-line quotes
      const body = JSON.stringify(request);
      const queryParams: string[] = [];
      let uri = path;
      if (queryParams.length > 0) {
        uri += `?${queryParams.join("&")}`
      }
      return handler({
        path: uri,
        method: "PUT",
        body,
      }, {
        service: "AuthService",
        method: "ChangePassword",
      }) as Promise<ChangePasswordResponse>;
    },
  };
}

// @@protoc_insertion_point(typescript-http-eof)
